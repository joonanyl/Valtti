generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  reviews       Review[]
  sellingOrders Order[]   @relation("seller")
  buyingOrders  Order[]   @relation("buyer")
}

model Product {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  price       Float?
  location    String?
  profession  String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  reviews     Review[]
  orders      Order[]
}

model Order {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  totalPrice Float
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  buyer      User     @relation(name: "buyer", fields: [buyerId], references: [id])
  buyerId    String
  seller     User     @relation(name: "seller", fields: [sellerId], references: [id])
  sellerId   String
  status     Boolean
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  productId String
  userId    String
  content   String
  rating    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
